This folder contains all of the files necessary to run our project. Once it is downloaded from GitHub, there are a few different forms with which our project can be run. All of our files are written in python 2.7, so they must be run in that environment with "python /name_of_file/". If you would like to play against one expectimax agent, one stochastic greedy agent, and one minimax agent then the "humans_vs_agents.py" file should be run. In order to run a single random game in order to visualize how an entire game plays out you can run the "random_game.py" file. To run 20 simultaneous games using multiprocessing in which one greedy agent, one expectimax agent, one stochastic greedy agent, and one minimax agent play you can run the "agents_vs_geedy.py" file. To run 20 simultaneous games using multiprocessing in which two expectimax agents and two minimax agents play you can run the "exp_vs_minimax.py" file. In order to run 20 games of four maximax agents against eachother, you can run the "play_pooled_games.py" file. If you would like to change the depth of any of the minimax or expectimax agents, you can alter the 4th element of any instance of an expectimax or minimax agent, however, these are set to one because at lower depths it takes substantial time. If you would like to turn off the beam search aspect of any of the minimax or expectimax agents, then you can make the 6th argument of any instance of them False, however this will also cause it to take substantial runtime. If you would like to change the beamsize of any of the agents, then you can alter the 7th argument of any instance. Lastly if you would like to alter the weights that the evaluation function is given then you can alter the 8th element of any instance, or change the weights array in the agents_vs_greedy, or play_pooled_games files. When any file is run, the results are printed to the terminal. The format is a tuple of the winning color, the array of scores, the array of agents, the agents evaluation function weights, and the time of the game. Both returned arrays are in order of move order, Yellow goes first, green second, red third, and blue last.
